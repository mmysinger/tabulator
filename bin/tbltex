#!/usr/bin/env python

## Copyright (C) 2009-2014 Stefan Schroedl

import os
import sys
from string import *
import math
from optparse import OptionParser


# guess separator from header
def guessDelim(h):
    for delim in ('', '|', ',', '\t', ' '):
        if delim in h:
            return delim
    raise ValueError('No delimiter found - please specify')

def isNan(num):
    return num != num

def isNumeric(x):
    try:
        float(x)
        return True
    except Exception:
        return False

def format(x,prec, raw):
    if (raw):
        return x
    try:
        xNum = float(x)
    except ValueError:
        return x # no number
    if isNan(xNum):
        return x  # no number, don't apply formatting
    # heuristic guess
    if (abs(xNum)>1e7 or abs(xNum)<1e-7):
        # exponential format
        return ("%g" % (xNum))
    isInt = (math.floor(xNum) == xNum)
    if (isInt):
        return ("%d" % int(xNum))
    # right justified
    return ("%.*f" % (prec,xNum))


def main():
    usage = 'Usage: tbltex -[abBdhpr] file'
    description = """Format tabular data into latex format"""
    parser = OptionParser(usage=usage,description=description)
    parser.add_option('-a', '--alignment', dest='align',
                      help =
                      """Alignment spec for all columns. Default: 'r' """,
                      default='r')
    parser.add_option('-b', '--boldheader', dest='boldheader',
                      help ="""Bold header""",
                      action='store_true', default=False)
    parser.add_option('-B', '--boldfirst', dest='boldfirst',
                      help ="""Bold first column""",
                      action='store_true', default=False)
    parser.add_option('-d', '--delimiter', dest='delim',
                      help =
                      """Column delimiter in input file.
                      Try to guess if unspecified""")
    parser.add_option('-p', '--precision', dest='prec',
                      help ="""Number of digits for floating point formatting""",
                      default="2")
    parser.add_option('-r', '--raw', dest='raw',
                      help ="""Do not attempt to format numbers""",
                      action='store_true',
                      default=False)

    (opt, args) = parser.parse_args()

    if len(args) != 1:
        print usage
        sys.exit()
    infile = open(args[0], 'r')
    firstLine = True

    prec = int(opt.prec)
    raw = opt.raw

    print '''\\begin{table}
\\begin{center}'''
    while 1:
        line = infile.readline()
        if not line: break
        line = line.strip() # remove newline

        lineEmpty = (len(line) == 0)
        if (lineEmpty):
            if (not firstLine):
                print ""
                firstLine = True
        else:
            if (opt.delim):
                delim = opt.delim
            else:
                delim = guessDelim(line)
            entry = line.split(delim)
            if (firstLine):
                print "\\begin{tabular}[c]{|" + ((opt.align + "|") * len(entry)) + "} \\hline"
                if opt.boldheader:
                    lineOut = "{\\bf " + format(entry[0],prec,raw) + '} & ' + ' & '.join(["{\\bf " + format(x,prec,raw) + "}" for x in entry[1:]]) + '\\\\ \\hline'
                else:
                    lineOut = format(entry[0],prec,raw) + ' & ' + ' & '.join([format(x,prec,raw) for x in entry[1:]]) + '\\\\ \\hline'
                firstLine = False
            else:
                if (opt.boldfirst):
                    lineOut = '{\\bf ' + format(entry[0],prec,raw) + '} & ' + ' & '.join([format(x,prec,raw) for x in entry[1:]]) + '\\\\ '
                else:
                    lineOut = format(entry[0],prec,raw) + ' & ' + ' & '.join([format(x,prec,raw) for x in entry[1:]]) + '\\\\ '
            print lineOut
    print '''\\hline
\\end{tabular}
\\end{center}
\\caption{\label{}}
\\end{table} '''

if(__name__ == "__main__"):
    main()
