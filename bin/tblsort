#!/usr/bin/env perl

## Copyright (C) 2009-2014 Stefan Schroedl

use strict;
use warnings;
use Getopt::Std;
use FileHandle;
use File::Spec;
use Pod::Usage;

my $header     = "UNINIT";
my $opt_string = "d:ehk:ms";
my %opt;

my $delim = "\t";
my @field_arr;
my %field_hash;

my $infile = new FileHandle;

sub guess_delim
{
    my $line = shift;

    for my $delim ( "", "|", ",", "\t", " " )
    {
        return $delim if ( $line =~ m/$delim/ );
    }
    die "No delimiter found - please specify";
}

sub process_header
{
    my $header = shift;

    $delim = guess_delim($header) unless ( $opt{'d'} );

    @field_arr = split "\Q$delim\E", $header;
    %field_hash = ();
    my $col = 1;

    foreach my $field (@field_arr)
    {
        $field_hash{$field} = $col;
        $col++;
    }
}

sub parse_keys
{
    my $input = shift;
    my $out_spec = '';

    my $valid_flags = "bdfgiMnr";

    my @key_specs = split ",", $input;
    for my $key_spec (@key_specs) {
        my @parts = split "/", $key_spec;
        if ($#parts > 1)
        {
            die "Error in key spec: $key_spec";
        }
        my $col_name = $parts[0];
        
        if ( !($col_name =~ /\d+/) )
        {
            if ( !exists($field_hash{$col_name}) )
            {
                die "Unknown column: $col_name";
            }
            $col_name = $field_hash{$col_name};
        }
        $out_spec = "$out_spec -k$col_name";

        my $flags = '';
        if ( $#parts == 1 ) 
        {
           $flags = $parts[1];
           foreach my $flag ( split //, $flags ) 
           {
               if ( !( $valid_flags =~ /\Q$flag\E/ ) ) 
               {
                   die "Invalid sort flag: $flag";
               }
           }
           $out_spec = "${out_spec}${flags}";
        }
    }
    return $out_spec;
}


sub main
{
    Getopt::Std::getopts( $opt_string, \%opt ) or pod2usage(2);

    pod2usage( { -exitval => 0, -verbose => 2 } ) if $opt{'m'};
    pod2usage(1) if ( $opt{'h'} );

    pod2usage(2) if $#ARGV > 1;

    $delim = $opt{'d'} if ( $opt{'d'} );

    my $filename = '';
    my $opt_gz = 0;
    my $temp_dir = '.';

    if ( $#ARGV > -1 )
    {
        $filename = $ARGV[0];
        $opt_gz = ( $filename =~ /\.gz$|\.Z$|\.zip$/ );

         my ( $vol, $dir, $file ) =
             File::Spec->splitpath( $filename );
        if ( $dir ne '' )
        {
            $temp_dir = $dir;
        }
    }
    else
    {
        # try to read stdin
        if ( -t *STDIN )
        {

            # no arguments given
            pod2usage(
                {
                    -exitval => 2,
                    -verbose => 1,
                    -message => 'No file argument given'
                }
            );
        }
        $filename = '-';
    }

    my $CAT = $opt_gz ? "gunzip -c" : "cat";

    $infile->open( $opt_gz ? "gunzip -c $filename |" : $filename )
      or die "Couldn't open '$filename'";

    binmode( $infile, ":utf8" );

    ## Get field names from first line

    my $header = <$infile>;
    $header =~ s/\s+$//g;
    process_header($header);

    my $key_args = '';
    if ( $opt{'k'} )
    {
        $key_args = parse_keys($opt{'k'});
    }

    my $stable_flag = '';
    if ( $opt{'s'} )
    {
        $stable_flag = '-s';
    }

    my $cmd = "sort -t'$delim' -S 500M $stable_flag -T $temp_dir $key_args";

    if ( $opt{'e'} )
    {
        if ( $filename eq '-' )
        {
            print "tail -n +2 | (echo '$header' ; $cmd)\n";
        }
        else
        {
            printf "$CAT $filename | tail -n +2 | (echo '$header' ; $cmd)\n";
        }
        exit(0);
    }
    else
    {
        binmode( STDOUT, ":utf8" );

        if ( $filename eq '-' )
        {
            open( STDOUT, sprintf( "| (echo '$header' ; %s)", $cmd ) );

            while (<$infile>)
            {
                print;
            }
	    close STDOUT;
        }
        else
        {
            $infile->close();
            system(
                sprintf( "$CAT $filename | tail -n +2 | (echo '$header' ; $cmd)" )
            );
        }
    }
}

main;

__END__

=head1 NAME

tblsort - sort on body of file, keep header unchanged

=head1 SYNOPSIS

B<tblsort>  [ B<-dehkms> ] <file>

cat <file> | B<tblsort>  S<[ B<-dehkms> ] >

=head1 OPTIONS

=over

=item B<-d> <Column delimiter>

Default: try any of '^A', '|', ',', '\t', ' '

=item B<-k> <Sort key list>

Comma-delimited list of sort keys, either column names or indices. Optionally, the common unix sort flags can be specified for each key, in the form <column name>/<flags>.

=item B<-e>

Do not execute command; instead, print script to stdout

=item B<-h>

Show this help message

=item B<-m>

Print manual page

=item B<-s>

Use stable sort algorithm

=back

=head1 DESCRIPTION

This program expects a delimited file, where the first line is interpreted as a header. It outputs the header, then calls sort on `tail -n +2 file`, with the specified options.

=head1 EXAMPLES

tblsort -k user_name' file.txt | less

cat file.txt | tblsort -k sales/rd,customer/f' | less

=head1 AUTHOR

Stefan Schroedl E<lt>stefan.schroedl@gmx.deE<gt>

=head1 COPYRIGHT

Copyright (c) 2009-2015 by Stefan Schroedl

=head1 LICENSE

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

=head1 DISCLAIMER

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
