#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Std;
use FileHandle;
use Pod::Usage;

my $header     = "UNINIT";
my $opt_string = 'hmed:';
my %opt;

my $delim = "\t";
my @field_arr;
my %field_hash;

my $infile = new FileHandle;

sub guess_delim
{
    my $line = shift;

    for my $delim ( "\t", ",", " ", "" )
    {
        return $delim if ( $line =~ m/$delim/ );
    }
    return "\t";
}

sub process_header
{
    my $header = shift;

    $delim = guess_delim($header) unless ( $opt{'d'} );

    @field_arr = split $delim, $header;
    %field_hash = ();
    my $col = 1;

    foreach my $field (@field_arr)
    {
        $field_hash{$field} = $col;
        $col++;
    }
}

sub replace_column_names
{
    my $input = shift;

    # must replace longest names first, possible string overlap!
    my @sorted_names = sort { length($b) <=> length($a) } @field_arr;
    foreach my $name (@sorted_names)
    {
        my $col = ${ field_hash { $name } };
        $input =~ s/\?$name/$col/g;
    }

    # delimiter symbol
    $input =~ s/\?delim/$delim/g;
    return $input;
}

sub main
{
    Getopt::Std::getopts( $opt_string, \%opt ) or pod2usage(2);

    pod2usage( { -exitval => 0, -verbose => 2 } ) if $opt{'m'};
    pod2usage(1) if ( $opt{h} or $#ARGV < 0 );

    pod2usage(2) if $#ARGV > 1;

    $delim = $opt{'d'} if ( $opt{'d'} );

    my $cmd = $ARGV[0];

    my $filename = '';

    my $opt_gz = 0;

    if ( $#ARGV > 0 && $ARGV[1] !~ m/^-/ )
    {
        $filename = $ARGV[1];
        $opt_gz = ( $filename =~ /\.gz$|\.Z$|\.zip$/ );
    }
    else
    {

        # try to read stdin
        if ( -t *STDIN )
        {

            # no arguments given
            pod2usage(
                {
                    -exitval => 2,
                    -verbose => 1,
                    -message => 'No file argument given'
                }
            );
        }
        $filename = '-';
    }

    my $CAT = $opt_gz ? "gunzip -c" : "cat";

    $infile->open( $opt_gz ? "gunzip -c $filename |" : $filename )
      or die "Couldn't open '$filename'";

    binmode( $infile, ":utf8" );

    ## Get field names from first line

    my $header = <$infile>;
    $header =~ s/\s+$//g;
    process_header($header);

    $cmd = replace_column_names($cmd);

    if ( $opt{'e'} )
    {
        if ( $filename eq '-' )
        {
            printf( "tail -n +2 | (echo $header ; %s)\n", $cmd );
        }
        else
        {
            printf( "$CAT $filename | tail -n +2 | (echo $header ; %s)\n",
                $cmd );
        }
        exit(0);
    }
    else
    {
        binmode( STDOUT, ":utf8" );

        if ( $filename eq '-' )
        {
            open( STDOUT, sprintf( "| (echo $header ; %s)", $cmd ) );

            while (<$infile>)
            {
                print;
            }
        }
        else
        {
            $infile->close();
            system(
                sprintf( "$CAT $filename | tail -n +2 | (echo $header ; %s)",
                    $cmd )
            );
        }
    }
}

main;

__END__

=head1 NAME

tblcmd - Run command (e.g., sort, uniq) on body of file, keep header unchanged

=head1 SYNOPSIS

B<tblcmd>  [ B<-hm> ] <cmd> <file>

cat <file> | B<tblcmd>  S<[ B<-hm> ] <cmd> >

=head1 OPTIONS

=over

=item B<-d> <Column delimiter>

Default: try any of '\t', ' ', ','

=item B<-e>

Do not execute command; instead, print script to stdout

=item B<-h>

Show this help message

=item B<-m>

Print manual page

=back

=head1 DESCRIPTION

This program expects a delimited file, where the first line is interpreted as a header. It outputs the header, then calls <cmd> on `tail -n +2 file`, with substitions: each occurrence of ?<column name>, for column names in the header, are replaced by the respective column index; and '?delim' is replaced by the detected column delimiter.

=head1 EXAMPLES

tblcmd 'sort -t"?delim" -k ?user_name' file.txt | less

cat file.txt | tblcmd 'sort -t"?delim" -k ?user_name' | less

=head1 AUTHOR

Stefan Schroedl E<lt>stefan.schroedl@gmx.deE<gt>

=head1 COPYRIGHT

Copyright (c) 2009 by Stefan Schroedl

=head1 LICENSE

This package is free software; you can redistribute it and/or modify it
under the terms of the "GNU General Public License Version 3".

Please refer to the file "COPYING" for details.

=head1 DISCLAIMER

This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the "GNU General Public License" for more details.

=cut
